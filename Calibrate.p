 {[j=30/55,:+,u+,r+,o=120,k+,n+,#+,v+,q+,b+]}{[f-]} {*********************************} UNIT Calibrate;{*********************************}{**********************************} INTERFACE {**********************************} USES QuickDraw, QuickdrawText, Types, OSUtils, ToolUtils, Timer, Errors, Menus, Files, Lists, Memory, Dialogs, Controls,   Packages, Printing, StandardFile, PasLibIntf, fenv, fp, Retrace, SegLoad, Windows, Events,  Spectrum_Structures, Declarations, INITIALIZE, Global_Functions, Utilities, Xray_Energies, SANDIA,  Physics, MathWin, CurveFit, Simplexer, XRay ; PROCEDURE Update_Calibrate(theWindow: WindowPtr); PROCEDURE Init_Calibrate;PROCEDURE Open_Calibrate;PROCEDURE Close_Calibrate(theWindow: WindowPtr);PROCEDURE Do_Calibrate(theEvent: EventRecord; theWindow: WindowPtr);{******************************} IMPLEMENTATION {**********************************} {[f+]} {$S Calibrate}  PROCEDURE Help;    VAR      tempRect                     : Rect;                  offset                       : integer;	  Left                         : integer;	  Top                          : integer;      n                            : integer;	  G_Help                       : DialogPtr;      itemHit                      : integer;      DType                         : Integer;      DItem                         : Handle;	  str                          : str255;	  ExitDialog                   : Boolean;    CONST      G_Accept                      = 1;	  BEGIN                                              G_Help := GetNewDialog(433, NIL, POINTER( - 1));ShowWindow(G_Help);SelectWindow(G_Help);SetPort(G_Help);OutlineButton(G_Help, 1, 16); { outline the OK button }SetFont('Monaco', 9, []);offset := 12;Left := 5;Top := 15;		   n := 0;	  moveto(Left,Top);DrawString('This dialog will calibrate the energy scale of DTSA so that the peak positions in your spectra');	  n := n+1; moveto(Left,Top + n*offset);str := 'appear correct. This is NOT A SUBSTITUTE for proper hardware calibration of your main spectroscopy';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'amplifier. The feature is intended to FINE TUNE the KLM markers, and other energy related functions';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'such as the SIMPLEX and LLSQ, so that reported energies are "correct".';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'If you exit the dialog with CALIBRATION ON,the WORK SPECTRUM ENERGY SLOPE and INTERCEPT ARE SET';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'to the selected values. NOTHING is actually done to the spectrum histogram. What happens is that';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'the energy of each channel is calculated from the equation energy = slope * channel + intercept where the';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'slope and intercept are determined by this calibration dialog. If the calibrate capability is turned ';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'off then energy is determined by multiplying the channel number by the eV/channel you have chosen.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'Once you turn calibration on, it`s on for any spectrum loaded into work.  Calibration stays on until ';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'you turn it off. The slope and intercept values stored in the experiment header of every spectrum file';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'are used for all calculations. These are one and zero if CALIBRATE values have never been saved.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := '"Use Calibration Data" uses the slope and intercept shown in the window.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := '"Use Spectrum Data" uses the slope and intercept stored in the Experiment Header.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := '   еее The calibration button is NOT intended to allow using LLSQ references that are out of calibration';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'with your spectra. REFERENCES AND SPECTRA MUST HAVE ABOUT THE SAME HARDWARE CALIBRATION. ';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := ' ';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := '  Auto calibrate runs a Simplex fit to peaks for the major lines of the elements on the clicked';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := ' button. If you use the AutoCalibrate buttons, Cu, Fe-Si, etc., the peak positions must be';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'no more than 1/3 of a peak width away from their true positions. IF THIS IS NOT THE CASE THEN THE';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'SIMPLEX PROCEDURE WILL EITHER PRODUCE GARBAGE OR WILL "HANG". Also, it is important to use spectra';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'which have good statistics and no peaks overlapping the peaks used for calibration.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'You can also run the simplex to determine the energies of a low energy and high energy peak.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'or, while we do not advise this, use the cursor (mouse) to measure the energies.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'In this case, expand the spectrum around each peak before reading the energy. Enter (in eV) the' ;DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'measured energies and the true energies in the boxes provided and turn on the calibration.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'This writes the calculated energy slope and intercept into the WORK EXPERIMENT Header.';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'If you want the calibration values to stick to a file, save them to the EXPERIMENT Header. ';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := '';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := 'BEFORE saving a spectrum, you can use the "shift" capability found in the Calculator button';DrawString(str); n := n+1; moveto(Left,Top + n*offset);str := ' to change the intercept of a spectrum, and you can enter the calculated dE in the header.';DrawString(str); n := n+1; moveto(Left,Top + n*offset); REPEAT  ModalDialog(NIL, itemHit);  GetDialogItem(G_Help, itemHit, DType, DItem, tempRect);  IF (itemHit = G_Accept) THEN	BEGIN	  ExitDialog := True;	END;UNTIL ExitDialog;ExitDialog := False; temprect := G_Help^.portRect; DisposeDialog(G_Help);FillWhiteSpace(temprect); END;                {End of G_Help procedure}  PROCEDURE Init_Calibrate;    BEGIN      Calibrate_GetSelection := NIL;    END;  PROCEDURE Update_Calibrate(theWindow: WindowPtr);    VAR      tempRect                      : Rect;                  CalReturn                     : integer;      DType                         : Integer;      DItem                         : Handle;      Savedport                     : GrafPtr;          BEGIN      IF (Calibrate_GetSelection <> NIL) AND (theWindow = Calibrate_GetSelection) THEN        BEGIN          GetPort(Savedport);          SetPort(Calibrate_GetSelection); {Point to our port for drawing in our window}          BeginUpdate(Calibrate_GetSelection);      {Set the clipping to the update area}          DrawControls(Calibrate_GetSelection);		  EndUpdate(Calibrate_GetSelection);                 SetPort(Savedport);		  GetDialogItem(Calibrate_GetSelection,CalReturn,DType,DItem,tempRect);		  PenSize(3, 3);		  InsetRect(tempRect, -4, -4);		  FrameRoundRect(tempRect, 16, 16); 		  PenSize(1, 1);         END;    END; {End for the update procedure}  {==============================================================}  PROCEDURE Open_Calibrate;    BEGIN {Start of modeless dialog handler}      IF (Calibrate_GetSelection = NIL) THEN        BEGIN          Calibrate_GetSelection := GetNewDialog(451, NIL, pointer( - 1));		  MoveWindow(Calibrate_GetSelection,MaxWindowRect.Left,MaxWindowRect.Bottom-123,TRUE );           ShowWindow(Calibrate_GetSelection);          Update_Calibrate(Calibrate_GetSelection);          SetPort(Calibrate_GetSelection);          {Drawdialog(Calibrate_GetSelection);}        END      ELSE        BEGIN		  MoveWindow(Calibrate_GetSelection,MaxWindowRect.Left,MaxWindowRect.Bottom-123,TRUE );           Update_Calibrate(Calibrate_GetSelection);          ShowWindow(Calibrate_GetSelection);          SetPort(Calibrate_GetSelection);        END;      Mouse_Active_Window; {Calibrate_Window_Active => true}    END; {End of the Open procedure}  {==============================================================}  PROCEDURE Close_Calibrate(theWindow: WindowPtr);    BEGIN      IF (theWindow = Calibrate_GetSelection) AND (Calibrate_GetSelection <> NIL) THEN        BEGIN          DisposeDialog(Calibrate_GetSelection);          Mouse_Active_Window;          Calibrate_GetSelection := NIL;        END;    END;  {==============================================================}  PROCEDURE Do_Calibrate(theEvent: EventRecord; theWindow: WindowPtr);    CONST      CalReturn                     = 1;      Auto_on_Cu                    = 2;	  I_StaticText					= 4;      Al_Fe                         = 12;      Si_Fe                         = 13;      Al_Cu                         = 14;	  Auto_on_Ni                    = 15;	  sel_lines						= 26;		{make this agree with the resource}      Hi_Peak_Meas                  = 3;              { these four are also in simplex.p }      Hi_Peak_Book                  = 5;      Lo_Peak_Meas                  = 9;      Lo_Peak_Book                  = 11;      I_Intercept                   = 17;      I_Slope                       = 16;      I_Calibration_On              = 18;      I_Calibration_File            = 19;      I_Calibration_Off             = 20;	  I_Save_Calibration            = 27;	  I_Help                        = 21;    VAR      Calibrate_ExitDialog          : boolean;        {Flag to close this dialog}      auto_Cal        			    : boolean;      tempRect                      : Rect;      DType                         : Integer;      Index, jj		                : Integer;      DItem,DItemTEMP               : Handle;      CItem, CTempItem,CItemTEMP    : ControlHandle;      sTemp                         : Str255;      itemHit                       : Integer;		errCode						: Integer;		bytecount					: Longint;		temp_slope, temp_intercept	: real;		save_slope, save_intercept	: real;		SIG_SQ, Low_delta_e, High_delta_e	: real;		temp_E, temp_max, e_max		: real;		delta_e						: array [1..2] of real;		temp_Z, ncvm				: Integer;		temp_label					: string[5];		std	                		:  real {double_t};		solution                    : LinFitExtArray; { [1..Max_Num_Terms] of double_t}		Energy						: real {double_t};            	lista                       : LinFitIntArray;      	covar                       : LinFitCovArray;      	Index1, order               : Longint;     	BEGIN {this procedure is called in MCA.p}      IF (Calibrate_GetSelection <> NIL) AND (Calibrate_Window_Active) THEN        BEGIN		  Drawdialog(Calibrate_GetSelection);		  		  Update_Full;          {BackColor(YellowColor);}          ForeColor(BlackColor);          Mouse_Active_Window;		  auto_cal := false;		  save_slope := Plt_Spec[10]^^.Expt_Info.Energy_Slope;		  save_intercept := Plt_Spec[10]^^.Expt_Info.Energy_Intercept;          if (MCA_Spectrum_Active = false) then beepbeep;		  {if ((RdBinaryName >= Plt_Spec[10]^^.Expt_Info.MCA_Filename) = false) then beepbeep;beepbeep;}		  {е Turn on and off the appropriate radio buttons е}		  if (MCA_Spectrum_Active = false) or		  	{a >= b means every b is a member of a...}		     ( (RdBinaryName >= Plt_Spec[10]^^.Expt_Info.MCA_Filename) = false) then		  begin			GetDialogItem(Calibrate_GetSelection, I_Save_Calibration, DType, DItemTEMP, tempRect);			CItemTEMP := controlHandle(DItemTEMP);		    SetControlTitle(CItemTEMP,'Calibration values to Work');		  end;		            GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);          CItemTemp := controlHandle(DItem);			  SetControlValue(CItemTemp, 0);	      		  GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);		  CItem := controlHandle(DItem);		  	SetControlValue(CItem, 0);		  		  GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);		  CTempItem := controlHandle(DItem);		  	SetControlValue(CTempItem, 0);          IF Calibrate_Energy_Scale = False THEN		  BEGIN		    {beepbeep;}		  	SetControlValue(CItemTemp, 1);	{turn on I_Calibration_Off button}			temp_slope := 1.0;			temp_intercept := 0.0;		  END		  ELSE BEGIN		     {beepbeep;beepbeep;}			{HighPeak... and Cal_vals... are globals...}			temp_slope := (High_Peak_Meas - Low_Peak_Meas) / (High_Peak_Book - Low_Peak_Book);			temp_intercept := High_Peak_Meas - temp_slope * High_Peak_Book;	        If (File_Calibration = false) then			    SetControlValue(CItem, 1)	{I_Calibration_On}			Else Begin				SetControlValue(CTempItem, 1);	{I_Calibration_File}				temp_slope := Plt_Spec[10]^^.Expt_Info.Energy_Slope;				temp_intercept := Plt_Spec[10]^^.Expt_Info.Energy_Intercept;			End;			Cal_vals.Energy_Slope := temp_slope;			Cal_vals.Energy_Intercept := temp_intercept;				  DrawLeftHL;				  Markers;		  END;           {е Stuff the edit text boxes with the appropriate values е}		  {the energy values go to whatever they were left at...}          GetDialogItem(Calibrate_GetSelection, Hi_Peak_Meas, DType, DItem, tempRect);          RealToString(High_Peak_Meas, 5, 3, sTemp);          SetDialogItemText(DItem, sTemp);          GetDialogItem(Calibrate_GetSelection, Hi_Peak_Book, DType, DItem, tempRect);          RealToString(High_Peak_Book, 5, 3, sTemp);          SetDialogItemText(DItem, sTemp);          GetDialogItem(Calibrate_GetSelection, Lo_Peak_Meas, DType, DItem, tempRect);          RealToString(Low_Peak_Meas, 5, 3, sTemp);          SetDialogItemText(DItem, sTemp);          GetDialogItem(Calibrate_GetSelection, Lo_Peak_Book, DType, DItem, tempRect);          RealToString(Low_Peak_Book, 5, 3, sTemp);          SetDialogItemText(DItem, sTemp);		            GetDialogItem(Calibrate_GetSelection, I_Slope, DType, DItem, tempRect);          RealToString(Cal_vals.Energy_Slope, 5, 5, sTemp);          SetDialogItemText(DItem, sTemp);          GetDialogItem(Calibrate_GetSelection, I_Intercept, DType, DItem, tempRect);          RealToString(Cal_vals.Energy_Intercept, 5, 5, sTemp);          SetDialogItemText(DItem, sTemp);		 (* GetDialogItem(Calibrate_GetSelection,CalReturn,DType,DItem,tempRect);		  PenSize(3, 3);		  InsetRect(tempRect, -4, -4);		  FrameRoundRect(tempRect, 16, 16); 		  PenSize(1, 1); *)			          Calibrate_ExitDialog := False;          REPEAT            ModalDialog(NIL, itemHit);            GetDialogItem(Calibrate_GetSelection, itemHit, DType, DItem, tempRect);            CItem := controlHandle(DItem);			IF (itemHit = Auto_on_Cu) THEN              BEGIN                GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 0);			    GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);		  		SetControlValue(controlHandle(DItem), 0);                GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 1);								Xray_Data_Request := true;                Calibrate_Energy_Scale := False;                get_Energies(29); { Load the book energies (because Calibrate_Energy_Scale is False) }                Low_Peak_Book := (eV_Line[42] * Wt_Line[42] + eV_Line[43] * Wt_Line[43])/(Wt_Line[42] + Wt_Line[43]);                High_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                Number_of_PeakRois := 3;                Number_of_Elements_Simplexed := 1;                periodic_picks[1] := 29;				periodic_picks[2] := 29;				x_label[1] := 'LA1  ';				x_label[2] := 'KA1  ';				elements_chosen := true;			  END			ELSE IF (itemHit = Auto_on_Ni) THEN              BEGIN                GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 0);			    GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);		  		SetControlValue(controlHandle(DItem), 0);                GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 1);								Xray_Data_Request := true;                Calibrate_Energy_Scale := False;                get_Energies(28); { Load the book energies (because Calibrate_Energy_Scale is False) }                Low_Peak_Book := (eV_Line[42] * Wt_Line[42] + eV_Line[43] * Wt_Line[43])/(Wt_Line[42] + Wt_Line[43]);                High_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                Number_of_PeakRois := 3;                Number_of_Elements_Simplexed := 1;                periodic_picks[1] := 28;				periodic_picks[2] := 28;				x_label[1] := 'LA1  ';				x_label[2] := 'KA1  ';				elements_chosen := true;			  END			ELSE IF (itemHit = Al_Fe) THEN              BEGIN                GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 0);			    GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);		  		SetControlValue(controlHandle(DItem), 0);                GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 1);								Xray_Data_Request := true;                Calibrate_Energy_Scale := False;				get_Energies(13);                Low_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                get_Energies(26);                High_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                Number_of_PeakRois := 3;                Number_of_Elements_Simplexed := 2;                periodic_picks[1] := 13;                periodic_picks[2] := 26;			  				x_label[1] := 'KA1  ';				x_label[2] := 'KA1  ';				elements_chosen := true;			  END			ELSE IF (itemHit = Al_Cu) THEN              BEGIN                GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 0);			    GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);		  		SetControlValue(controlHandle(DItem), 0);                GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 1);								Xray_Data_Request := true;                Calibrate_Energy_Scale := False;				get_Energies(13);                Low_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                get_Energies(29);                High_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                Number_of_PeakRois := 3;                Number_of_Elements_Simplexed := 2;                periodic_picks[1] := 13;                periodic_picks[2] := 29;			  				x_label[1] := 'KA1  ';				x_label[2] := 'KA1  ';				elements_chosen := true;			  END			ELSE IF (itemHit = Si_Fe) THEN              BEGIN                GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 0);			    GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);		  		SetControlValue(controlHandle(DItem), 0);                GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);                SetControlValue(controlHandle(DItem), 1);								Xray_Data_Request := true;                Calibrate_Energy_Scale := False;				get_Energies(14);                Low_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                get_Energies(26);                High_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;                Number_of_PeakRois := 3;                Number_of_Elements_Simplexed := 2;                periodic_picks[1] := 14;                periodic_picks[2] := 26;			  				x_label[1] := 'KA1  ';				x_label[2] := 'KA1  ';				elements_chosen := true;			  END			ELSE IF (itemHit = sel_lines) THEN              BEGIN			    Use_Manual_ROIs := false;				AutoROI_Chooser;				HideDialogItem(Calibrate_GetSelection,I_StaticText);				ShowDialogItem(Calibrate_GetSelection,I_StaticText);				Update_Calibrate(Calibrate_GetSelection);				if ((Number_of_Elements_Simplexed > 0) or (Elements_Chosen = true)) then 				begin					GetDialogItem(Calibrate_GetSelection, I_Calibration_On, DType, DItem, tempRect);					SetControlValue(controlHandle(DItem), 0);					GetDialogItem(Calibrate_GetSelection, I_Calibration_File, DType, DItem, tempRect);					SetControlValue(controlHandle(DItem), 0);					GetDialogItem(Calibrate_GetSelection, I_Calibration_Off, DType, DItem, tempRect);					SetControlValue(controlHandle(DItem), 1);										Xray_Data_Request := true;					Calibrate_Energy_Scale := False;					get_Energies(periodic_picks[1]);					if x_label[1] = 'MA1  ' then Low_Peak_Book := eV_Line[72]					else if x_label[1] = 'LA1  ' then Low_Peak_Book := (eV_Line[42] * Wt_Line[42] + eV_Line[43] * Wt_Line[43])/(Wt_Line[42] + Wt_Line[43])					else if x_label[1] = 'KA1  ' then Low_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0;					get_Energies(periodic_picks[2]);					if x_label[2] = 'KA1  ' then High_Peak_Book := (2.0 * eV_Line[1] + eV_Line[2])/3.0					else if x_label[2] = 'LA1  ' then High_Peak_Book := (eV_Line[42] * Wt_Line[42] + eV_Line[43] * Wt_Line[43])/(Wt_Line[42] + Wt_Line[43])					else if x_label[2] = 'MA1  ' then High_Peak_Book := eV_Line[72];					Number_of_PeakRois := 3;					Number_of_Elements_Simplexed := 2;					if Low_Peak_Book > High_Peak_Book then					  begin						temp_E := Low_Peak_Book;						Low_Peak_Book := High_Peak_Book;						High_Peak_Book := temp_E;						temp_Z := periodic_picks[1];						periodic_picks[1] := periodic_picks[2];						periodic_picks[2] := temp_Z;						temp_label := x_label[1];						x_label[1] := x_label[2];						x_label[2] := temp_label;					  end;				end;			  END;		if elements_chosen then BEGIN            IF (itemHit = Auto_on_Cu) or			   (itemHit = Auto_on_Ni) or			   (itemHit = Al_Fe) or			   (itemHit = Si_Fe) or			   (itemHit = Al_Cu) or			   (itemHit = sel_lines) THEN              BEGIN				  CompareGen_To_Work(theBGRec); 				  IF (SiLi_Response_Calculated = False) { if a new spectrum in work...}				  THEN BEGIN					GenFromWork(theBGRec);	{gets theGenRec values from Work }					Detector_efficiency(theBGRec,SiLi_Response_Calculated);				  END;			  	SIG_SQ := theSigConst * (Low_Peak_Book - 5895.0) + 4050.0;				Low_delta_e := Sqrt(SIG_SQ) * 4;			  	SIG_SQ := theSigConst * (High_Peak_Book - 5895.0) + 4050.0;				High_delta_e := Sqrt(SIG_SQ) * 4;                GetDialogItem(Calibrate_GetSelection, Lo_Peak_Book, DType, DItem, tempRect);                RealToString(Low_Peak_Book, 5, 3, sTemp);                SetDialogItemText(DItem, sTemp);                GetDialogItem(Calibrate_GetSelection, Hi_Peak_Book, DType, DItem, tempRect);                RealToString(High_Peak_Book, 5, 3, sTemp);                SetDialogItemText(DItem, sTemp);                wtswitch := True; { free fit }                 Plt_Spec[10]^^.Expt_Info.Energy_Slope := one;                Plt_Spec[10]^^.Expt_Info.Energy_Intercept := zero;                ROI^^.PEAK[1].Lo := rinttol((Low_Peak_Book-Low_delta_e)/Plt_Spec[10]^^.Expt_Info.dE);                ROI^^.PEAK[1].Hi := rinttol((Low_Peak_Book+Low_delta_e)/Plt_Spec[10]^^.Expt_Info.dE);                ROI^^.PEAK[2].Lo := rinttol((High_Peak_Book-High_delta_e)/Plt_Spec[10]^^.Expt_Info.dE);                ROI^^.PEAK[2].Hi := rinttol((High_Peak_Book+High_delta_e)/Plt_Spec[10]^^.Expt_Info.dE);                ROI^^.PEAK[1].Exists := true;                ROI^^.PEAK[2].Exists := true;								delta_e[1] := Low_delta_e/4.0;				delta_e[2] := High_delta_e/4.0;								FOR index1 := 1 to 2 do begin					temp_max := 0.0;					FOR index := ROI^^.PEAK[index1].Lo to ROI^^.PEAK[index1].Hi do begin						IF Plt_spec[10]^^.s[index] > temp_max then begin							temp_max := Plt_spec[10]^^.s[index];							e_max := index * Plt_Spec[10]^^.Expt_Info.dE;						end;						ROI^^.PEAK[index1].Lo := rinttol((e_max-delta_e[index1])/Plt_Spec[10]^^.Expt_Info.dE);						ROI^^.PEAK[index1].Hi := rinttol((e_max+delta_e[index1])/Plt_Spec[10]^^.Expt_Info.dE);					end;		{FOR index := ROI^^.PEAK[index1].Lo to ROI^^.PEAK[index1].Hi}				end;		{FOR index1 := 1 to 2}                Fit_Invisibly := true;                abort_x := False; { For the cntrl-c exit test logic }                Spectrum_Full[10] := true;                CheckItem(FullMenu, A^.C_Full[10], Spectrum_Full[10]);                Spectrum_Full[9] := true;                CheckItem(FullMenu, A^.C_Full[9], Spectrum_Full[9]);                Spectrum_Full[1] := true;                CheckItem(FullMenu, A^.C_Full[1], Spectrum_Full[1]);                Auto_Scale_Display := False;				Majors       := True;				Minors       := False;				Satellites   := False;				if (Plt_Spec[10]^^.Expt_Info.Detector.Spec = EDS) then				Analysis_result^^.fit_Params.FWStart := Plt_Spec[10]^^.Expt_Info.Si_Resolution;				if (Plt_Spec[10]^^.Expt_Info.Detector.Spec = WDS) then				Analysis_result^^.fit_Params.FWStart := Plt_Spec[10]^^.Expt_Info.WDS_Resolution;                Update_Full;		(*		Simplex_Start;                Sequential_SIMPLEX;					{auto_cal := true;				Calibrate_Energy_Scale := True;				File_Calibration := false;}         *)		 		 {New fit method - fit the log of the data to a parobola (second degree quadratic).}		             FOR Index := 1 TO 3 DO              BEGIN                Test_a_Handle(Handle(Xdata[Index]), 'Xdata[Index], wtfit in Simplex');                Xdata[Index] := WindowArrayHdl(NewHandle(sizeof(WindowArray))); { double_t }                moveHHi(Handle(Xdata[Index]));                HLock(Handle(Xdata[Index]));              END;            Test_a_Handle(Handle(Ydata), 'Ydata in wtfit');            Ydata := WindowArrayHdl(NewHandle(sizeof(WindowArray))); { double_t }            moveHHi(Handle(Ydata));            HLock(Handle(Ydata));            Test_a_Handle(Handle(Weight), 'Weight in wtfit');            Weight := WindowArrayHdl(NewHandle(sizeof(WindowArray))); { double_t }            moveHHi(Handle(Weight));            HLock(Handle(Weight));            FOR Index := 1 TO Max_Num_Terms DO solution[Index] := 0.0;              FOR Index := 1 TO Max_Fitting_Chans DO			  begin			    Weight^^[index] :=  100000.0;				Ydata^^[index] := 0.0; { double_t }			    FOR index1 := 1 TO 3 DO Xdata[index1]^^[index] := 0.0; { double_t } 			  end;			order := 3;			FOR Index := 1 TO order DO lista[Index] := Index;          FOR jj := 1 to 2 do begin		    index1 := 0;            Energy := ROI^^.PEAK[jj].Lo * Plt_Spec[10]^^.Expt_Info.dE;            FOR Index := ROI^^.PEAK[jj].Lo TO ROI^^.PEAK[jj].Hi DO              BEGIN {for index}                index1 := index1 + 1;				                Ydata^^[index1] := Ln(Plt_spec[10]^^.s[index]); {data to fit, log of spectrum is real, Ydata is double_t}                Xdata[1]^^[index1] := 1.0; { double_t - constant}                Xdata[2]^^[index1] := Energy; { Xdata, Energy are double_t - linear coef}				Xdata[3]^^[index1] := Energy * Energy; { Xdata, Energy are double_t - quad coef}					           { IF Col_1^[Index] < 1 THEN Weight^^[index1] := 1e12  has to be big for big spectra                 ELSE}				Weight^^[index1] := SQRT(Plt_spec[10]^^.s[Index]);				                Energy := Energy + Plt_Spec[10]^^.Expt_Info.dE;              END; {for index}			GLfit(Ydata, Weight, Xdata, index1, solution, order, lista, order, covar, ncvm, std);			(*Lfit(Ydata, Weight, Xdata, index1, order, covar, solution, std);*)  		 	IF jj = 1 then 				Low_Peak_Meas := - solution[2]/(2.0*solution[3])			ELSE IF jj = 2 then 				High_Peak_Meas := - solution[2]/(2.0*solution[3]);		 end;	{FOR jj := 1 to 2}		 	          (*  jj := 0;                REPEAT                  jj := jj + 1;                  Low_Peak_Meas := Analysis_Result^^.Fit_result.Err_or_Energy[jj] * 1000;                  IF jj >= 20 THEN                    BEGIN                      Low_Peak_Meas := zero;                      exit(Do_Calibrate);                    END;               UNTIL (Analysis_Result^^.Fit_params.Siegbahn[jj] = x_label[1]) AND 				      (Analysis_Result^^.Fit_params.Atomic_Number[jj] = periodic_picks[1]);                jj := 0;                REPEAT                  jj := jj + 1;                  High_Peak_Meas := Analysis_Result^^.Fit_result.Err_or_Energy[jj] * 1000;                  IF jj >= 20 THEN                    BEGIN                      High_Peak_Meas := zero;                      exit(Do_Calibrate);                    END;                UNTIL (Analysis_Result^^.Fit_params.Siegbahn[jj] = x_label[2]) AND 				      (Analysis_Result^^.Fit_params.Atomic_Number[jj] = periodic_picks[2]);	*)                GetDialogItem(Calibrate_GetSelection, Lo_Peak_Meas, DType, DItem, tempRect);                RealToString(Low_Peak_Meas, 5, 3, sTemp);                SetDialogItemText(DItem, sTemp);                GetDialogItem(Calibrate_GetSelection, Hi_Peak_Meas, DType, DItem, tempRect);                RealToString(High_Peak_Meas, 5, 3, sTemp);                SetDialogItemText(DItem, sTemp);							   temp_slope := (High_Peak_Meas - Low_Peak_Meas) / (High_Peak_Book - Low_Peak_Book);			   temp_intercept := High_Peak_Meas - temp_slope * High_Peak_Book;			   			  GetDialogItem(Calibrate_GetSelection, I_Slope, DType, DItem, tempRect);			  RealToString(temp_slope, 5, 5, sTemp);			  SetDialogItemText(DItem, sTemp);				  GetDialogItem(Calibrate_GetSelection, I_Intercept, DType, DItem, tempRect);			  RealToString(temp_intercept, 5, 5, sTemp);			  SetDialogItemText(DItem, sTemp);				                Xray_Data_Request := False;				Fit_Invisibly := False;                Update_Full;                {BeepBeep;}              END;		END;		{if elements_chosen}            {е Service the radio buttons е}			{I_Calibration_On  use window values or spectrum values;			  Otherwise use 0 and 1}             			IF (itemHit >= I_Calibration_On) AND (itemHit <= I_Calibration_Off) THEN              BEGIN                FOR Index := I_Calibration_On TO I_Calibration_Off DO                  BEGIN                    GetDialogItem(Calibrate_GetSelection, Index, DType, DItem, tempRect);                    SetControlValue(controlHandle(DItem), 0);                  END;                SetControlValue(CItem, 1); {...the one that was hit}								IF itemHit = I_Calibration_Off then Calibrate_Energy_Scale := FALSE				ELSE Calibrate_Energy_Scale := TRUE;{either file or fit}				if itemHit = I_Calibration_On then {use window data...}				begin					  GetDialogItem(Calibrate_GetSelection, Hi_Peak_Meas, DType, DItemTEMP, tempRect);					  GetDialogItemText(DItemTEMP, sTemp);					  High_Peak_Meas := MyStr2Num(sTemp);							  GetDialogItem(Calibrate_GetSelection, Hi_Peak_Book, DType, DItemTEMP, tempRect);					  GetDialogItemText(DItemTEMP, sTemp);					  High_Peak_Book := MyStr2Num(sTemp);							  GetDialogItem(Calibrate_GetSelection, Lo_Peak_Meas, DType, DItemTEMP, tempRect);					  GetDialogItemText(DItemTEMP, sTemp);					  Low_Peak_Meas := MyStr2Num(sTemp);							  GetDialogItem(Calibrate_GetSelection, Lo_Peak_Book, DType, DItemTEMP, tempRect);					  GetDialogItemText(DItemTEMP, sTemp);					  Low_Peak_Book := MyStr2Num(sTemp);											temp_slope := (High_Peak_Meas - Low_Peak_Meas) / (High_Peak_Book - Low_Peak_Book);					temp_intercept := High_Peak_Meas - temp_slope * High_Peak_Book;					File_Calibration := false;				end				else if itemHit = I_Calibration_File then begin				  if (MCA_Spectrum_Active) and				     (RdBinaryName >= Plt_Spec[10]^^.Expt_Info.MCA_Filename) then				  begin					errCode := FSpOpenDF(Read_DTSA_Spec, fsRdWrPerm, Hold_RefNum);					RdBinaryName := Read_DTSA_Spec.name;					IF errCode <> NoErr THEN BeepBeep  					ELSE BEGIN						 errCode := SetFPos_Err(Hold_RefNum, fsFromStart, 0,'');						 bytecount := sizeof(expt_infoRec);						 errCode := FSRead_Err(Hold_RefNum, bytecount, @Plt_spec[10]^^.Expt_Info,'');					END;	{ ELSE BEGIN...}					errCode := FSClose(Hold_RefNum);					errCode := FlushVol(NIL, Read_DTSA_Spec.vRefNum);				 end;				 temp_slope := Plt_Spec[10]^^.Expt_Info.Energy_Slope;				 temp_intercept := Plt_Spec[10]^^.Expt_Info.Energy_Intercept;				 File_Calibration := true;				end	{ else if itemHit = I_Calibration_File...}				else begin						temp_slope := 1.0;						temp_intercept := 0.0;				end;				 				  GetDialogItem(Calibrate_GetSelection, I_Slope, DType, DItem, tempRect);				  RealToString(temp_slope, 5, 5, sTemp);				  SetDialogItemText(DItem, sTemp);						  GetDialogItem(Calibrate_GetSelection, I_Intercept, DType, DItem, tempRect);				  RealToString(temp_intercept, 5, 5, sTemp);				  SetDialogItemText(DItem, sTemp);				  Cal_vals.Energy_Slope := temp_slope;				  Cal_vals.Energy_Intercept := temp_intercept;				  				  DrawLeftHL;				  Markers;			 			  END;              IF (itemHit = CalReturn) { "exit" not accept 'cause there is no cancel }               THEN BEGIN                Calibrate_ExitDialog := true;              END;			               IF (itemHit = I_Help) THEN 			   BEGIN                Help;               END;		(*     GetDialogItem(Calibrate_GetSelection, I_Save_Calibration, DType, DItemTEMP, tempRect);             CItemTEMP := pointer(DItemTEMP); 			 if (Calibrate_Energy_Scale) and (MCA_Spectrum_Active) then HiliteControl(CItemTEMP, 0)			   else HiliteControl(CItemTEMP, 255);  		*)			              IF (itemHit = I_Save_Calibration) THEN 			   BEGIN	{If Work is from an open file then change the file and work, otherwise			             just change work...}				   Plt_Spec[10]^^.Expt_Info.Energy_Slope := temp_slope;				   Plt_Spec[10]^^.Expt_Info.Energy_Intercept := temp_intercept;				   if auto_cal then Plt_Spec[10]^^.Expt_Info.Si_Resolution := Analysis_Result^^.Fit_result.FWHM_Mn[2];				IF (MCA_Spectrum_Active) and				   (RdBinaryName >= Plt_Spec[10]^^.Expt_Info.MCA_Filename) then				WITH Plt_spec[10]^^,Expt_Info,SpectrumStuff					 DO begin						  errCode := FSpOpenDF(Read_DTSA_Spec, fsRdWrPerm, Hold_RefNum);						  RdBinaryName := Read_DTSA_Spec.name;						 IF errCode <> NoErr THEN BeepBeep  						 ELSE BEGIN							  errCode := SetFPos_Err(Hold_RefNum, fsFromStart, 0,'');							  bytecount := sizeof(expt_infoRec);							  errCode := FSWrite_Err(Hold_RefNum, bytecount, @Plt_spec[10]^^.Expt_Info,'');							END;	{ ELSE BEGIN...}						 errCode := FSClose(Hold_RefNum);						 errCode := FlushVol(NIL, Read_DTSA_Spec.vRefNum);					END;	{ WITH...}               END;				        UNTIL Calibrate_ExitDialog;	   	   Open_Sili_Window;	   Mouse_Active_Window;       UpDate_SiLi_Window(SiLiWindow);        Update_Full; 			        END; { IF (Calibrate_GetSelection <> NIL) AND (Calibrate_Window_Active).... }    END; {End of procedure}END.