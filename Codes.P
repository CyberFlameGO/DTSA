unit Codes;{******************************} INTERFACE {**********************************}	uses		QuickDraw, Types, OSUtils, ToolUtils, Timer, Errors, Menus, Files, Lists, Memory, Dialogs, Controls,TextUtils,   		Packages, Printing, StandardFile, fenv, fp {SANE}, SegLoad, Retrace, {StrLib,} CitInitialize, Windows, 		CITZAFCode, CITZAFCode1, Spectrum_Structures, Declarations, INITIALIZE, 		Global_Functions ; 			procedure D_Code_1;	procedure D_Code_2;	procedure D_Code_3;		procedure D_Code_4a;		procedure D_Code_4b;	    procedure D_Code_5;		    procedure D_Code_6;		    procedure D_Code_7;	procedure D_Code_8;{******************************} IMPLEMENTATION {**********************************}{$S Codes}	procedure D_Code_1;		{Input concentrations for calculating k-values}	const		I_Accept = 1;		I_Help = 2;		I_Z_First = 3;		I_Z__Last = 18;		I_WtFr_First = 19;		I_WtFr_Last = 34;		I_Stand_Name = 41;		I_Cancel = 42;	var		    ExitDialog: boolean;		    do_it: boolean;   					GetSelection: DialogPtr;			tempRect: Rect;			DType: Integer;			Index: Integer;			DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		             str	   : str255; 			procedure Refresh_Dialog;			var				rTempRect: Rect;		begin			SetPort(GetSelection);			rTempRect := tempRect;			GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);			InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16);			PenSize(1, 1); 			tempRect := rTempRect;		end;	begin		GetSelection := GetNewDialog(431, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection); 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_WtFr_First, DType, DItem, tempRect);				{RealToString(G4^^.K[Index + 1], 5, 5, str);}				RealToString(K_save[Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		GetDialogItem(GetSelection, I_Stand_Name, DType, DItem, tempRect);		SetDialogItemText(DItem, ID_Name);		Refresh_Dialog;		ExitDialog := FALSE;		repeat			ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);			if (ItemHit = I_Accept) then				begin					do_it := TRUE;					ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Cancel) then				begin					do_it := FALSE;					ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin					Refresh_Dialog;				end;		until ExitDialog;			{본본본본본본벦et results after dialog본본본본본본볗		IF do_it then begin			for index := 0 to 15 do				begin					GetDialogItem(GetSelection, Index + I_WtFr_First, DType, DItem, tempRect);					GetDialogItemText(DItem, sTemp);					G4^^.K[index + 1] := MyStr2Num(sTemp);					K_save[Index + 1] := G4^^.K[index + 1];				end;			GetDialogItem(GetSelection, I_Stand_Name, DType, DItem, tempRect);			GetDialogItemText(DItem, ID_Name);			DisposeDialog(GetSelection);			IN9 := 1;			MAIN_Handler1;		END		else			DisposeDialog(GetSelection);			end;    						{End of procedure D_Code_1}	procedure D_Code_2;		{Input drift correction}	const   									I_Accept = 1;		I_Help = 2;		I_Z_First = 3;		I_Z__Last = 18;		I_Drift_First = 19;		I_Drift_Last = 34;	var		    ExitDialog: boolean;   		 			GetSelection: DialogPtr;			tempRect: Rect;    					DType: Integer;    					Index: Integer;    					DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		             str : str255;				procedure Refresh_Dialog;   					var				rTempRect: Rect;     				begin			SetPort(GetSelection);  				rTempRect := tempRect;  				GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);  						InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16); 			PenSize(1, 1);  			 			tempRect := rTempRect;  			end;	begin   									GetSelection := GetNewDialog(5032, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  	 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_Drift_First, DType, DItem, tempRect);				RealToString(G^^.U[Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		Refresh_Dialog;     				ExitDialog := FALSE;  				repeat  								ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);				{Handle it real time}			if (ItemHit = I_Accept) then				begin										ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin										Refresh_Dialog;				end;    						until ExitDialog;   					{본본본본본본벦et results after dialog본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Drift_First, DType, DItem, tempRect);				GetDialogItemText(DItem, sTemp);				G^^.U[index + 1] := MyStr2Num(sTemp);			end;		DisposeDialog(GetSelection);		IN9 := 2;		MAIN_Handler1;	end;    						{End of procedure D_Code_2}	procedure D_Code_3;		{Input sample k-ratios}	const   									I_Accept = 1;		I_Help = 42;		I_Z_First = 3;		I_Z_Last = 18;		I_KVAL_First = 19;		I_KVAL_Last = 34;		I_Sample_Name = 41;		I_Cancel = 2;	var		    ExitDialog: boolean;		    do_it: boolean;   					GetSelection: DialogPtr;			tempRect: Rect;    					DType: Integer;    					Index: Integer;    					DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		            str  : str255;	 		procedure Refresh_Dialog;   					var				rTempRect: Rect;     				begin			SetPort(GetSelection);  				rTempRect := tempRect;  				GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);  						InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16); 			PenSize(1, 1);  			 			tempRect := rTempRect;  			end;	begin   									GetSelection := GetNewDialog(5033, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  	 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_KVAL_First, DType, DItem, tempRect);				{RealToString(G4^^.K[Index + 1], 5, 5, str);}				RealToString(K_save[Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		GetDialogItem(GetSelection, I_Sample_Name, DType, DItem, tempRect);		SetDialogItemText(DItem, ID_Name);		Refresh_Dialog;     				ExitDialog := FALSE;  				repeat  								ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);				{Handle it real time}			if (ItemHit = I_Accept) then				begin					do_it := TRUE;					ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Cancel) then				begin					do_it := FALSE;					ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin										Refresh_Dialog;				end;    						until ExitDialog;   					{본본본본본본벦et results after dialog본본본본본본볗		IF do_it then begin			for index := 0 to 15 do				begin					GetDialogItem(GetSelection, Index + I_KVAL_First, DType, DItem, tempRect);					GetDialogItemText(DItem, sTemp);					G4^^.K[index + 1] := MyStr2Num(sTemp);					K_save[Index + 1] := G4^^.K[index + 1];				end;			GetDialogItem(GetSelection, I_Sample_Name, DType, DItem, tempRect);			GetDialogItemText(DItem, ID_Name);			DisposeDialog(GetSelection);			IN9 := 3;			MAIN_Handler1;		END		else			DisposeDialog(GetSelection);			end;    						{End of procedure D_Code_3}	procedure D_Code_4a;		{Input standard background intensities}	const   									I_Accept = 1;		I_Help = 2;		I_Z_First = 3;		I_Z_Last = 18;		I_StdBkg_First = 19;		I_StdBkg_Last = 34;	var		    ExitDialog: boolean;   					GetSelection: DialogPtr;			tempRect: Rect;    					DType: Integer;    					Index: Integer;    					DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		            str  : str255;							procedure Refresh_Dialog;   					var				rTempRect: Rect;     				begin			SetPort(GetSelection);  				rTempRect := tempRect;  				GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);  						InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16); 			PenSize(1, 1);  			 			tempRect := rTempRect;  			end;	begin   									GetSelection := GetNewDialog(5035, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  	 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_StdBkg_First, DType, DItem, tempRect);				RealToString(G2^^.F[1, Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		Refresh_Dialog;     				ExitDialog := FALSE;  				repeat  								ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);				{Handle it real time}			if (ItemHit = I_Accept) then				begin										ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin										Refresh_Dialog;				end;    						until ExitDialog;   					{본본본본본본벦et results after dialog본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_StdBkg_First, DType, DItem, tempRect);				GetDialogItemText(DItem, sTemp);				G2^^.F[1, index + 1] := MyStr2Num(sTemp);			end;		DisposeDialog(GetSelection);		IN9 := 4;		MAIN_Handler1;	end;    						{End of procedure D_Code_4a}{$S Codes11}	procedure D_Code_4b;		{Input sample background intensities}	const   							 		I_Accept = 1;		I_Help = 2;		I_Z_First = 3;		I_Z_Last = 18;		I_SmpBkg_First = 19;		I_SmpBkg_Last = 34;	var		    ExitDialog: boolean;   					GetSelection: DialogPtr;			tempRect: Rect;    					DType: Integer;    					Index: Integer;    					DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		            str  : str255;			 		procedure Refresh_Dialog;   					var				rTempRect: Rect;     				begin			SetPort(GetSelection);  				rTempRect := tempRect;  				GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);  						InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16); 			PenSize(1, 1);  			 			tempRect := rTempRect;  			end;	begin   									GetSelection := GetNewDialog(5036, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  	 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_SmpBkg_First, DType, DItem, tempRect);				RealToString(G2^^.F[2, Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		Refresh_Dialog;     				ExitDialog := FALSE;  				repeat  								ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);				{Handle it real time}			if (ItemHit = I_Accept) then				begin										ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin										Refresh_Dialog;				end;    						until ExitDialog;   					{본본본본본본벦et results after dialog본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_SmpBkg_First, DType, DItem, tempRect);				GetDialogItemText(DItem, sTemp);				G2^^.F[2, index + 1] := MyStr2Num(sTemp);			end;		DisposeDialog(GetSelection);		IN9 := 41;		MAIN_Handler1;	end;    						{End of procedure D_Code_4b}{$S Codes57}	procedure D_Code_5;		{Input standard peak intensities}	const   									I_Accept = 1;		I_Help = 2;		I_Z_First = 3;		I_Z_Last = 18;		I_StdPk_First = 19;		I_StdPk_Last = 34;	var		    ExitDialog: boolean;   		 			GetSelection: DialogPtr;			tempRect: Rect;    					DType: Integer;    					Index: Integer;    					DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		            str  : str255;			 		procedure Refresh_Dialog;   					var				rTempRect: Rect;     				begin			SetPort(GetSelection);  				rTempRect := tempRect;  				GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);  						InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16); 			PenSize(1, 1);  				 			tempRect := rTempRect;  			end;	begin   									GetSelection := GetNewDialog(5037, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  	 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_StdPk_First, DType, DItem, tempRect);				RealToString(G2^^.F[3, Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		Refresh_Dialog;     				ExitDialog := FALSE;  				repeat  								ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);				{Handle it real time}			if (ItemHit = I_Accept) then				begin										ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin										Refresh_Dialog;				end;    						until ExitDialog;   					{본본본본본본벦et results after dialog본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_StdPk_First, DType, DItem, tempRect);				GetDialogItemText(DItem, sTemp);				G2^^.F[3, index + 1] := MyStr2Num(sTemp);			end;		DisposeDialog(GetSelection);		IN9 := 5;		MAIN_Handler1;	end;    						{End of procedure D_Code_5}	procedure D_Code_6;		{Input sample peak intensities}	const   							 		I_Accept = 1;		I_Help = 2;		I_Z_First = 3;		I_Z_Last = 18;		I_SmpPk_First = 19;		I_SmpPk_Last = 34;		I_Sample_Name = 41;	var		    ExitDialog: boolean;   		  			GetSelection: DialogPtr; 			tempRect: Rect;    		 			DType: Integer;    		 			Index: Integer;    		 			DItem: Handle; 						sTemp: Str255; 						itemHit: Integer;  		            str  : str255;				 		procedure Refresh_Dialog;   					var				rTempRect: Rect;     				begin			SetPort(GetSelection);  				rTempRect := tempRect;  				GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);  						InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16); 			PenSize(1, 1);  			  		    tempRect := rTempRect;  			end;	begin   									GetSelection := GetNewDialog(5034, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  	 			{본본본본벱etup initial conditions본본본본본본볗		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_Z_First, DType, DItem, tempRect);				SetDialogItemText(DItem, A^.sym[A^.IZ[Index + 1]]);				GetDialogItem(GetSelection, Index + I_SmpPk_First, DType, DItem, tempRect);				RealToString(G2^^.F[4, Index + 1], 5, 5, str);				SetDialogItemText(DItem, str);			end;		GetDialogItem(GetSelection, I_Sample_Name, DType, DItem, tempRect);		SetDialogItemText(DItem, ID_Name);		Refresh_Dialog;     				ExitDialog := FALSE;  				repeat  								ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);				{Handle it real time}			if (ItemHit = I_Accept) then				begin					ExitDialog := TRUE;					Refresh_Dialog;				end;    							if (ItemHit = I_Help) then				begin					Refresh_Dialog;				end;    						until ExitDialog;   		 		for index := 0 to 15 do			begin				GetDialogItem(GetSelection, Index + I_SmpPk_First, DType, DItem, tempRect);				GetDialogItemText(DItem, sTemp);				G2^^.F[4, index + 1] := MyStr2Num(sTemp);			end;		GetDialogItem(GetSelection, I_Sample_Name, DType, DItem, tempRect);		GetDialogItemText(DItem, ID_Name);		DisposeDialog(GetSelection);		IN9 := 6;		MAIN_Handler1;	end;    						{End of procedure D_Code_6}{$S Codes4956} 	procedure D_Code_7;		{Atom proportion input}	const		I_Accept = 1;		I_Oxide_Switch = 2;		I_Cation_Switch = 3;		I_Input_Num = 7;	var			ExitDialog: boolean;			GetSelection: DialogPtr;			tempRect: Rect;			DType: Integer;			Index: Integer;			DItem: Handle;			CItem	: controlhandle;			sTemp: Str255;			itemHit: Integer;			temp: Integer;            str  : str255;					procedure Refresh_Dialog;			var				rTempRect: Rect;		begin			SetPort(GetSelection);			rTempRect := tempRect;			GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);			PenSize(3, 3);			InsetRect(tempRect, -4, -4);			FrameRoundRect(tempRect, 16, 16);			PenSize(1, 1);     			tempRect := rTempRect;		end;	begin		GetSelection := GetNewDialog(5038, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection); 		if NCAT = 0 then			begin				Num_Oxs := Ox_Norm;				temp := I_Cation_Switch;			end		else			begin				Ox_Norm := NCAT;				temp := I_Oxide_Switch;			end;		GetDialogItem(GetSelection, temp, DType, DItem, tempRect);		CItem := Pointer(DItem);		SetControlValue(controlhandle(DItem), 1);		GetDialogItem(GetSelection, I_Input_Num, DType, DItem, tempRect);		RealToString(Ox_Norm, 4, 1, str);		SetDialogItemText(DItem, str);		Refresh_Dialog;		ExitDialog := FALSE;		repeat			ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);			CItem := controlhandle(DItem);			if (itemHit = I_Accept) then				begin					ExitDialog := TRUE;					Refresh_Dialog;				end;			if (itemHit >= I_Oxide_Switch) and (itemHit <= I_Cation_Switch) then				begin					for Index := I_Oxide_Switch to I_Cation_Switch do						begin							GetDialogItem(GetSelection, Index, DType, DItem, tempRect);							SetControlValue(controlhandle(DItem), 0);						end;					SetControlValue(CItem, 1);				end;		until ExitDialog; 		Index := I_Oxide_Switch;		GetDialogItem(GetSelection, I_Input_Num, DType, DItem, tempRect);		GetDialogItemText(DItem, sTemp);		Ox_Norm := MyStr2Num(sTemp);		repeat			GetDialogItem(GetSelection, Index, DType, DItem, tempRect);			temp := GetControlValue(controlhandle(DItem));			Index := Index + 1;		until (temp <> 0) or (Index > I_Cation_Switch);		temp := Index - I_Oxide_Switch + 1;		if temp = 2 then			begin				NCAT := 0;				Num_Oxs := Ox_Norm;			end		else			begin				NCAT := Ox_Norm;				Num_Oxs := 0;			end;		DisposeDialog(GetSelection);		IN9 := 7;		MAIN_Handler1;	end;                                  {End of procedureD_Code_7}{$S Codes352}			procedure D_Code_8;		{Input standard composition}	const		I_Accept = 1;		I_Help = 84;		I_Z_First = 51;		I_Z_Last = 66;		I_ElWtFr_First = 3;		I_ElWtFr_Last = 18;		I_OxWtFr_First = 19;		I_OxWtFr_Last = 34;		I_NumAtoms_First = 35;		I_NumAtoms_Last = 50;		I_Standard_Name = 67;		I_Standard_Elem = 68;		R_ElWtFr = 69;		R_OxWtFr = 70;		R_AtWtFr = 71;		I_Save = 83;		I_Cancel = 2;	var		    ExitDialog: boolean;  			GetSelection: DialogPtr;			tempRect: Rect;			DType: Integer;			Index, nn: Integer;			DItem: Handle;			CItem	: controlhandle;			sTemp: Str255;			itemHit: Integer;			temp: Integer; 			BTemp: Longint;			Blob: Integer;            str  : str255;					label			100;		procedure Item_Dimmer;		begin			BTemp := Longint(nn);			numtostring(BTemp, str ); { ????? }			GetDialogItem(GetSelection, BTemp, DType, DItem, tempRect);			SetDialogItemText(DItem, ' --- ');		end;		procedure Init_Values;			var				mm: Integer;		begin			Blob := 0;			for mm := R_ElWtFr to R_AtWtFr do				begin					GetDialogItem(GetSelection, mm, DType, DItem, tempRect);					SetControlValue(controlhandle(DItem), 0);				end;			for mm := 0 to 15 do				begin					GetDialogItem(GetSelection, mm + I_Z_First, DType, DItem, tempRect);					if A^.IZ[mm + 1] > 0 then						SetDialogItemText(DItem, A^.sym[A^.IZ[mm + 1]])					else						SetDialogItemText(DItem, '');				end;			if IN8 < 1 then				IN8 := 1;			case G^^.Standard_Comp_Code[IN8] of				8: 					BTemp := R_AtWtFr;				9: 					BTemp := R_ElWtFr;				10: 					BTemp := R_OxWtFr;				otherwise					begin						BTemp := R_ElWtFr;						G^^.Standard_Comp_Code[IN8] := 9;						BeepBeep;						BeepBeep;					end;			end;                    { Case }			GetDialogItem(GetSelection, BTemp, DType, DItem, tempRect);			SetControlValue(controlhandle(DItem), 1);			case G^^.Standard_Comp_Code[IN8] of				9: 					begin						for mm := I_OxWtFr_First to I_OxWtFr_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_NumAtoms_First to I_NumAtoms_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_ElWtFr_First to I_ElWtFr_Last do							begin								RealToString(CoS_H^^.v[IN8, mm - I_ElWtFr_First + 1], 5, 4, str );								GetDialogItem(GetSelection, mm, DType, DItem, tempRect);								SetDialogItemText(DItem, str );							end;					end;				10: 					begin						for mm := I_ElWtFr_First to I_ElWtFr_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_NumAtoms_First to I_NumAtoms_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_OxWtFr_First to I_OxWtFr_Last do							begin								RealToString(CoS_H^^.v[IN8, mm - I_OxWtFr_First + 1], 5, 4, str );								GetDialogItem(GetSelection, mm, DType, DItem, tempRect);								SetDialogItemText(DItem, str );							end;					end;				8: 					begin						for mm := I_OxWtFr_First to I_OxWtFr_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_ElWtFr_First to I_ElWtFr_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_NumAtoms_First to I_NumAtoms_Last do							begin								RealToString(CoS_H^^.v[IN8, mm - I_NumAtoms_First + 1], 4, 2, str );								GetDialogItem(GetSelection, mm, DType, DItem, tempRect);								SetDialogItemText(DItem, str );							end;					end;				otherwise					begin						for mm := I_OxWtFr_First to I_OxWtFr_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_NumAtoms_First to I_NumAtoms_Last do							begin								nn := mm;								Item_Dimmer;							end;						for mm := I_ElWtFr_First to I_ElWtFr_Last do							begin								RealToString(CoS_H^^.v[IN8, mm - I_ElWtFr_First + 1], 5, 4, str );								GetDialogItem(GetSelection, mm, DType, DItem, tempRect);								SetDialogItemText(DItem, str );							end;					end;			end;                    { CASE }			GetDialogItem(GetSelection, I_Standard_Elem, DType, DItem, tempRect);			SetDialogItemText(DItem, A^.sym[A^.IZ[IN8]]);			GetDialogItem(GetSelection, I_Standard_Name, DType, DItem, tempRect);			SetDialogItemText(DItem, G^^.Name_of_Standard[IN8]);		end;                      { Init_Values }	begin		GetSelection := GetNewDialog(5039, nil, Pointer(-1));		ShowWindow(GetSelection);		SelectWindow(GetSelection);		SetPort(GetSelection);  		Init_Values;100:		ExitDialog := FALSE;		if IN8 < 1 then			IN8 := 1;		repeat			ModalDialog(nil, itemHit);			GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);			CItem := controlhandle(DItem);			if (itemHit = I_Accept) then				begin					ExitDialog := TRUE;				end;			if (itemHit = I_Cancel) then				begin					Init_Values;					ExitDialog := TRUE;				end;			if (itemHit = I_Save) or (itemHit = I_Accept) then				begin					GetDialogItem(GetSelection, I_Standard_Elem, DType, DItem, tempRect);					GetDialogItemText(DItem, str);					IN8 := 0;					temp := AtSymbol_To_Znum(str);					for Index := 1 to IN1 do						begin							if (temp = A^.IZ[Index]) and (G4^^.IL[Index] > 0) and (G4^^.IL[Index] < 4) then								IN8 := Index;						end;					if IN8 = 0 then						begin							BeepBeep;							putMessage('The Element you find a standard for must be', 'one of the elements that you are analyzing.', 'Please try again.', '');							goto 100;						end;					Index := R_ElWtFr;					repeat						GetDialogItem(GetSelection, Index, DType, DItem, tempRect);						CItem := controlhandle(DItem);						temp := GetControlValue(CItem);						Index := Index + 1;					until (temp <> 0) or (Index > R_AtWtFr);					temp := Index - R_ElWtFr + 1;					case temp of						2: 							begin								G^^.Standard_Comp_Code[IN8] := 9;								for Index := 0 to 15 do									begin										GetDialogItem(GetSelection, Index + I_ElWtFr_First, DType, DItem, tempRect);										GetDialogItemText(DItem, sTemp);										G4^^.K[Index + 1] := MyStr2Num(sTemp);										CoS_H^^.v[IN8, Index + 1] := G4^^.K[Index + 1];									end;							end;						3: 							begin								G^^.Standard_Comp_Code[IN8] := 10;								for Index := 0 to 15 do									begin										GetDialogItem(GetSelection, Index + I_OxWtFr_First, DType, DItem, tempRect);										GetDialogItemText(DItem, sTemp);										G4^^.K[Index + 1] := MyStr2Num(sTemp);										CoS_H^^.v[IN8, Index + 1] := G4^^.K[Index + 1];									end;							end;						4: 							begin								G^^.Standard_Comp_Code[IN8] := 8;								for Index := 0 to 15 do									begin										GetDialogItem(GetSelection, Index + I_NumAtoms_First, DType, DItem, tempRect);										GetDialogItemText(DItem, sTemp);										G4^^.K[Index + 1] := MyStr2Num(sTemp);										CoS_H^^.v[IN8, Index + 1] := G4^^.K[Index + 1];									end;							end;						otherwise							begin								G^^.Standard_Comp_Code[IN8] := 9;								for Index := 0 to 15 do									begin										GetDialogItem(GetSelection, Index + I_ElWtFr_First, DType, DItem, tempRect);										GetDialogItemText(DItem, sTemp);										G4^^.K[Index + 1] := MyStr2Num(sTemp);										CoS_H^^.v[IN8, Index + 1] := G4^^.K[Index + 1];									end;							end;					end;              { Case }					GetDialogItem(GetSelection, I_Standard_Name, DType, DItem, tempRect);					GetDialogItemText(DItem, G^^.Name_of_Standard[IN8]);					if G4^^.K[IN8] <= 0 then						begin							BeepBeep;							putMessage('It`s nice if a standard for an element contains', 'some of that element. Please Try again!', '', '');							goto 100;						end;					IN9 := G^^.Standard_Comp_Code[IN8];					Init_Values;				end;			if (itemHit = I_Help) then				begin					putMessage('I`m on my way', '', '', '');				end;			if (itemHit >= R_ElWtFr) and (itemHit <= R_AtWtFr) then				begin					for Index := R_ElWtFr to R_AtWtFr do						begin							GetDialogItem(GetSelection, Index, DType, DItem, tempRect);							SetControlValue(controlhandle(DItem), 0);						end;					SetControlValue(CItem, 1);					case itemHit - R_ElWtFr + 1 of						1: 							begin								for Index := I_OxWtFr_First to I_OxWtFr_Last do									begin										nn := Index;										Item_Dimmer;									end;								for Index := I_NumAtoms_First to I_NumAtoms_Last do									begin										nn := Index;										Item_Dimmer;									end;								for Index := I_ElWtFr_First to I_ElWtFr_Last do									begin										GetDialogItem(GetSelection, Index, DType, DItem, tempRect);										SetDialogItemText(DItem, '0');									end;							end;						2: 							begin								for Index := I_ElWtFr_First to I_ElWtFr_Last do									begin										nn := Index;										Item_Dimmer;									end;								for Index := I_NumAtoms_First to I_NumAtoms_Last do									begin										nn := Index;										Item_Dimmer;									end;								for Index := I_OxWtFr_First to I_OxWtFr_Last do									begin										GetDialogItem(GetSelection, Index, DType, DItem, tempRect);										SetDialogItemText(DItem, '0');									end;							end;						3: 							begin								for Index := I_OxWtFr_First to I_OxWtFr_Last do									begin										nn := Index;										Item_Dimmer;									end;								for Index := I_ElWtFr_First to I_ElWtFr_Last do									begin										nn := Index;										Item_Dimmer;									end;								for Index := I_NumAtoms_First to I_NumAtoms_Last do									begin										GetDialogItem(GetSelection, Index, DType, DItem, tempRect);										SetDialogItemText(DItem, '0');									end;							end;					end;              { CASE }				end;			if (itemHit = I_Standard_Elem) then				Blob := 1;			if (itemHit <> I_Standard_Elem) and (Blob = 1) then				begin					GetDialogItem(GetSelection, I_Standard_Elem, DType, DItem, tempRect);					GetDialogItemText(DItem, str);					IN8 := 0;					temp := AtSymbol_To_Znum(str);					for Index := 1 to IN1 do						begin							if (temp = A^.IZ[Index]) and (G4^^.IL[Index] > 0) and (G4^^.IL[Index] < 4) then								IN8 := Index;						end;					if IN8 = 0 then						begin							BeepBeep;							putMessage('The Element you find a standard for must be', 'one of the elements that you are analyzing.', 'Please try again.', '');							goto 100;						end;					Init_Values;				end;		until ExitDialog;		DisposeDialog(GetSelection);		IN9 := G^^.Standard_Comp_Code[IN8];		if Run_Data_Now then			MAIN_Handler1;	end;                        {End of procedure}end.                              {End of unit}