UNIT wMSA_Format_R_Plug;INTERFACEUSES	Types, QuickDraw, Memory, fp, StandardFile, GestaltEqu, Errors, Files,	TextUtils, {PascalA4,} FilePlugIns;const		__procinfo : longint = $3F80;{$Main}PROCEDURE	ENTRYPOINT(message:Integer; VAR InPtr:IOPlugPtr; VAR theResult:OSerr);IMPLEMENTATION{$IFC NOT POWERPC}uses PascalA4;{$ENDC}PROCEDURE wMSA_Format_11(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;PROCEDURE DoAbout(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;PROCEDURE DoOpen(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;PROCEDURE DoRead(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;{FUNCTION	Str2Num(s: Str255): Real;FORWARD;}PROCEDURE 	ENTRYPOINT{(message:Integer; VAR InPtr:IOPlugPtr; VAR theResult:OSErr)};		{ Main dispatching routine.  Initializes and sets up the global variables,	}		{		and performs the operation specified by the message. 				}VAR	firstTime	: BOOLEAN;	OldA4		: Longint;BEGIN{$IFC NOT POWERPC}	oldA4 := SetCurrentA4();	RememberA4();{$ENDC}	theResult:=noErr;	firstTime:=(InPtr=NIL);					{ See if this is the first time called }	IF firstTime THEN BEGIN						{ If so, allocate and initialize a data area }		InPtr:= IOPlugPtr(NewPtrClear(sizeof(IOPlug)));		IF (InPtr=NIL) THEN BEGIN			debugstr('memFullErr');			theResult:=memFullErr;{$IFC NOT POWERPC}	oldA4 := SetA4(oldA4);{$ENDC}			EXIT(ENTRYPOINT);		END;				END;		CASE message OF					{ Perform the requested operation }		fileAbout		:DoAbout(InPtr, theResult);		ImpFile			:DoRead(InPtr, theResult);		ExpFile			:wMSA_Format_11(InPtr, theResult);		OpenInPlug		:DoOpen(InPtr, theResult);		OpenExPlug		:DoOpen(InPtr, theResult);		END; {CASE message}		{$IFC NOT POWERPC}	oldA4 := SetA4(oldA4);{$ENDC}END;PROCEDURE DoAbout(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);	Begin	End;	PROCEDURE DoOpen(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);	Begin		InPtr^.PlugInName:='Write MSA 1.1 Format';		{Debugstr('Inside of wMSA_Format_R - Do Open');}		theResult := noErr;	End;	PROCEDURE DoRead(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);	Begin	End;PROCEDURE wMSA_Format_11(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);          VAR      index, nn, jj, kk             : integer;      FileSize                      : longint;      Refnum                     	: integer;      indexL, posit                 : longint;      bytecount                     : longint;      str, str1, str2               : str255;	  num_channels					: real;	  err	                        : OSErr;	  IValue						: longint;	  Version, Rvalue, columns      : real;  	BEGIN		Refnum := InPtr^.rd_refNum;		{Debugstr('Inside of MSA_Format');}		str := '#Title   : ';		str := CONCAT(str, InPtr^.Specimen_Comment_Field,chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);							str := '#Version :       1.1';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);				str := '#NPTS-   :    ';		str := StringOf(str, InPtr^.Number_of_Channels:6, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#NCOL-   :       5.0';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#OFFS-EV :    ';		str := StringOf(str, InPtr^.NDoffset:6, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#EVCH-   :    ';		str := StringOf(str, InPtr^.dE:6:3, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#VOLT-KV :     ';		str := StringOf(str, InPtr^.kV:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#ALPH-MR :      0.00';	{Incidence beam divergence - EELS}		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#BETA-MR :      0.00';	{EELS}		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#LTIM-MS :  ';		str := StringOf(str, InPtr^.Live_Time*1000:8:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#DTIM-MS :       0.0';	{dead-time}		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#BCUR-NA :  ';		str := StringOf(str, InPtr^.Begin_Faraday:8:2, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#BDIA-NM :      0.00';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#THCK-NM :   ';	{Specimen thickness}		str := StringOf(str, InPtr^.S_Thickness*1.0E7:7:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#SPECTRUM: ';		str := CONCAT(str, InPtr^.Owner, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);{ееееееееееееееее}          jj := 1; { jj will be the channel number }          num_channels := InPtr^.Number_of_Channels;          REPEAT {еееее This part writes the spectrum еееее}			indexL := 0;            str := '';            WHILE ((indexL < 5) AND (jj <= num_channels)) DO begin              indexL := indexL + 1;           	  str := StringOf(str, InPtr^.Spec_cts[jj]:15:1,chr(44));          	  jj := jj + 1;          	END;          	str := CONCAT(str, chr(13), chr(10));			IValue := length(str);			err := FSWrite(Refnum,IValue,@str[1]);          UNTIL (jj > num_channels); {еееее This part read in the spectrum еееее}		str := '#ENDDATA :';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);      END; { MSA Format }END.