UNIT CDEF;(*	Control Definition Function for TimeMeters control *)INTERFACEUSES		Types,QuickDraw,QuickDrawText,TextUtils,Memory,OSUtils,ToolUtils,Controls,Fonts,Packages,fp,PascalA4;{$Main}FUNCTION	TIMEMETERS(varCode:Integer;theControl:ControlHandle;message:Integer;param:Longint):Longint;IMPLEMENTATIONFUNCTION 	TIMEMETERS(varCode:Integer;theControl:ControlHandle;message:Integer;param:Longint):Longint;TYPE	TimeMeterPtr		= ^TimeMeterRec;	TimeMeterRec		= RECORD		RTime			: Real;		LTime			: Real;		PDead			: Real;		ActiveAcqStr	: Str255;		TMGrafPtr		: GrafPtr; {offscreen bitmap pointer}	END;CONST	TimeMeterFont				= Monaco;	TimeMeterFSize				= 9;VAR	RealRect	: Rect;	LiveRect	: Rect;	DeadRect	: Rect;	tRect		: Rect;	TimeMeter	: TimeMeterPtr;	sStr		: Str255;	IL,JL		: LongInt;	OldA4		: Longint;BEGIN	OldA4:=SetCurrentA4;	HLock(Handle(theControl));	CASE message OF		drawCntl	:			WITH theControl^^ DO BEGIN		{Draw visible parts of control}				IF contrlVis<>0 THEN BEGIN					TimeMeter:=TimeMeterPtr(contrlData);					WITH TimeMeter^ DO BEGIN						SetPort(GrafPtr(TMGrafPtr));						EraseRect(TMGrafPtr^.portRect);						pennormal;						RealRect:=contrlRect;						RealRect.bottom:=RealRect.top+((RealRect.bottom-RealRect.top) DIV 3);						LiveRect:=RealRect;						OffSetRect(LiveRect,0,(RealRect.bottom-RealRect.top));						DeadRect:=LiveRect;						OffSetRect(DeadRect,0,(RealRect.bottom-RealRect.top));												IF (contrlValue<>-1) THEN BEGIN							EraseRect(contrlRect);							PenSize(2,2);							FrameRect(contrlRect);							PenSize(1,1);							FrameRect(RealRect);							FrameRect(LiveRect);							FrameRect(DeadRect);						END;							tRect:=RealRect;						InsetRect(tRect,1,1);						EraseRect(tRect);						MoveTo(RealRect.left+4,RealRect.bottom-3);			{move to start of text}						DrawString('Real');						NumToString(System.Round(RTime),sStr);						sStr:=ConCat(sStr,' s');						Moveto((RealRect.right-StringWidth(sStr)-2),RealRect.bottom-3);						DrawString(sStr);												tRect:=LiveRect;						InsetRect(tRect,1,1);						EraseRect(tRect);						MoveTo(LiveRect.left+4,LiveRect.bottom-3);{move to start of text}						DrawString('Live');						NumToString(System.Round(LTime),sStr);						sStr:=ConCat(sStr,' s');						Moveto((LiveRect.right-StringWidth(sStr)-2),LiveRect.bottom-3);						DrawString(sStr);												tRect:=DeadRect;						InsetRect(tRect,1,1);						EraseRect(tRect);						MoveTo(DeadRect.left+4,DeadRect.bottom-3);{move to start of text}						DrawString('Dead');						NumToString(System.Round(PDead),sStr);						sStr:=ConCat(sStr,' %');						Moveto((DeadRect.right-StringWidth(sStr)-2),DeadRect.bottom-3);						DrawString(sStr);						SetPort(GrafPtr(contrlOwner));						BackColor(WhiteColor);						ForeColor(BlackColor);						CopyBits(TMGrafPtr^.portBits,GrafPtr(contrlOwner)^.portBits,								 TMGrafPtr^.portBits.bounds,ContrlRect,SrcCopy,Nil);					END;				END;	  		END;		testCntl	:			WITH theControl^^ DO BEGIN						{Test which control part has mousedown}				IF contrlHilite=255 THEN BEGIN					TIMEMETERS:=0;							{Return 0 if 255 hiliting}				END ELSE IF contrlHilite=254 THEN BEGIN					TIMEMETERS:=254;						{Return 254 if 254 hiliting}				END ELSE IF PtinRect(Point(param),contrlRect) THEN BEGIN					TIMEMETERS:=255;						{Return 255 if in part}				END;			END;		calcCRgns	:			WITH theControl^^ DO BEGIN		{Calculate control's region in window}				RectRgn(RgnHandle(param),contrlRect);	{For now, its a Rect region}	  		END;		initCntl	:BEGIN				WITH theControl^^ DO BEGIN					{Initialize extra control fields}					contrlAction:=Pointer(-1);					ReserveMem(Sizeof(TimeMeterRec));					contrlData:=Handle(NewPtr(Sizeof(TimeMeterRec)));	{Pointer Here}					IF (contrlData=NIL) THEN DebugStr('out of mem in initCntl');					TimeMeter:=TimeMeterPtr(contrlData);					With TimeMeter^ DO BEGIN						RTime:=0;						LTime:=0;						PDead:=0;						TMGrafPtr:=GrafPtr(NewPtr(SizeOf(GrafPort)));	{Create the offsreen bitmap}						OpenPort(TMGrafPtr);						TMGrafPtr^.TxFont:=TimeMeterFont;		{Good looking small font}						TMGrafPtr^.TxSize:=TimeMeterFSize;		{Small size}						IL:=contrlRect.right-contrlRect.left;						JL:=contrlRect.bottom-contrlRect.top;						WITH TMGrafPtr^.portBits DO BEGIN	{create the bitmap}							baseAddr:=NewPtr(IL*JL);							rowbytes:=IL;							bounds:=contrlRect;						END;					END;				END;			END;		dispCntl	:			WITH theControl^^ DO BEGIN		{Dispose of extra control fields}				TimeMeter:=TimeMeterPtr(contrlData);				IF (TimeMeter<>NIL) THEN BEGIN					DisposePtr(TimeMeter^.TMGrafPtr^.portBits.baseAddr);					DisposePtr(Ptr(TimeMeter^.TMGrafPtr));					DisposePtr(Ptr(TimeMeter));				END;			END;		posCntl		:			WITH theControl^^ DO BEGIN		{Move control within window}			END;		thumbCntl	:			WITH theControl^^ DO BEGIN		{Calculate thumb constraints}			END;		dragCntl	:			WITH theControl^^ DO BEGIN		{Drag control}				TIMEMETERS:=0;				{Return 0 so system handles it}			END;		autoTrack	:			WITH theControl^^ DO BEGIN		{Do mousedown on control}			END;	END; {Case}	theControl^^.contrlValue:=0;	HUnLock(Handle(theControl));	OldA4:=SetA4(OldA4);END;END.