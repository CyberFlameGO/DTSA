{[j=30/55,:+,u+,r+,o=120,k+,n+,#+,v+,q+,b+]}{[f-]}{*********************************} UNIT Connect;{*********************************}{**********************************} INTERFACE {**********************************} USES QuickDraw, Types, OSUtils, ToolUtils, Timer, Errors, Menus, Files, Lists, Memory, Dialogs, Windows,   Packages, Printing, StandardFile, fenv, fp {SANE}, SegLoad, Retrace, PasLibIntf, Controls, Spectrum_Structures, Declarations, INITIALIZE, Global_Functions, Utilities, xray, physics, zaf, Choices, citinitialize, CITZAFCode, CITZAFCode1, CharForce, CitPhysics ;          PROCEDURE MANUAL_RUN;                             PROCEDURE CIT_Unanalyzed_Element;                 PROCEDURE Close_CITZAF;       PROCEDURE aSpectrum_Handler_1;       {******************************}IMPLEMENTATION{**********************************}{$S Connect}   (* VAR 	  num_std_structures		   : integer;*)PROCEDURE aSpectrum_Handler_1;  BEGIN	Spectrum_Handler_1;  END;PROCEDURE Close_CITZAF;BEGIN if G <> NIL then H_UnLock_Dispose(Handle(G),'G xx'); if CoS_H <> NIL then H_UnLock_Dispose(Handle(CoS_H),'Cos_H xx');END; PROCEDURE MANUAL_RUN;   CONSTB_Quit_CITZAF                   = 1 ;B_Choose_Corrections            = 3 ;B_Setup_Output                  = 4 ;B_Analytical_Conditions         = 5 ;B_Choose_Elements_Lines         = 6 ;B_Go_Ahead                      = 7 ;B_Get_Compositions_Standards    = 9 ;B_Input_Raw_Data                = 11 ;B_Read_Setup_Data               = 13 ;B_Read_Run_File                 = 16 ;B_Choose_Specimen_Type          = 17; VAR      ExitDialog                    : boolean;      GetSelection                  : DialogPtr;      tempRect                      : Rect;      DType                         : Integer;      DItem                         : Handle;      itemHit                       : Integer;BEGIN      GetSelection := GetNewDialog(739, NIL, POINTER( - 1));      ShowWindow(GetSelection);      SelectWindow(GetSelection);      SetPort(GetSelection);      OutlineButton(GetSelection, 1, 16); { outline the accept button }      { еее Grey out the unacceptables еее }		 GetDialogItem(GetSelection, 3, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 4, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 5, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 6, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 7, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 9, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 11, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);		 GetDialogItem(GetSelection, 16, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 255);        ExitDialog := FALSE; 	   REPEAT        ModalDialog(NIL, itemHit);        GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);       { CItem := controlhandle(DItem);}        IF (itemHit = B_Quit_CITZAF) THEN          BEGIN            ExitDialog := True;			OutlineButton(GetSelection, 1, 16); { outline the accept button }          END;         IF (itemHit = B_Choose_Specimen_Type) THEN          BEGIN            Choose_Specimen_Type;					 GetDialogItem(GetSelection, 3, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 0);		 GetDialogItem(GetSelection, 4, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 0);		 GetDialogItem(GetSelection, 5, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 0);		 GetDialogItem(GetSelection, 6, DType, DItem, tempRect);		 HiliteControl(controlhandle(DItem), 0);		           END;		IF itemHit = B_Choose_Corrections THEN		  BEGIN		    IRepro := 2;			D_Correction_Procedure;			OutlineButton(GetSelection, 1, 16); { outline the accept button }		  END;		IF itemHit = B_Setup_Output THEN		  BEGIN			D_Printout_Conditions;			OutlineButton(GetSelection, 1, 16); { outline the accept button }		  END;		IF itemHit = B_Analytical_Conditions THEN		  BEGIN			D_Analytical_Condition;			OutlineButton(GetSelection, 1, 16); { outline the accept button }		  END;		  		  IF itemHit = B_Choose_Elements_Lines THEN		  BEGIN			CIT_Per_Tab_Buttons;			OutlineButton(GetSelection, 1, 16); { outline the accept button }			if I_N > 0 then			begin			   GetDialogItem(GetSelection, B_Go_Ahead, DType, DItem, tempRect);			   HiliteControl(controlhandle(DItem), 0);			end;		  END;		IF itemHit = B_Go_Ahead THEN		  BEGIN			 Setup_File_Input := False;			 MAIN_Handler;			 IRepro := 0;			 OutlineButton(GetSelection, 1, 16); { outline the accept button }			 if IPtc = 1 then Choose_Standards_Type;			 {if init = 0 then}		{ее7/11/97 - Init is 0 for pure element and 1 for sample???ее}			 begin				GetDialogItem(GetSelection, B_Get_Compositions_Standards, DType, DItem, tempRect);				HiliteControl(controlhandle(DItem), 0);		  				GetDialogItem(GetSelection, B_Input_Raw_Data, DType, DItem, tempRect);				HiliteControl(controlhandle(DItem), 0);		  				GetDialogItem(GetSelection, B_Read_Run_File, DType, DItem, tempRect);				HiliteControl(controlhandle(DItem), 0);			 end;		  END;		IF itemHit = B_Get_Compositions_Standards THEN		  BEGIN			D_Standard_Choice;			OutlineButton(GetSelection, 1, 16); { outline the accept button }		  END;		IF itemHit = B_Input_Raw_Data THEN		  BEGIN			Run_Data_Now := True;			D_Input_Data_Codes;			OutlineButton(GetSelection, 1, 16); { outline the accept button }		  END;		IF itemHit = B_Read_Setup_Data THEN		  BEGIN			 Run_Data_Now := False;			 MAIN_Handler;			 OutlineButton(GetSelection, 1, 16); { outline the accept button }		  END;		IF itemHit = B_Read_Run_File THEN		  BEGIN			 Setup_File_Input := True;			 if init = 0 then				 MAIN_Handler			 else				 begin					 repeat						 MAIN_Handler1;					 until All_Done_in_File;					 in9 := 12;					 All_Done_in_File := False;					 Setup_File_Input := False;					 MAIN_Handler1;					 				 end;			OutlineButton(GetSelection, 1, 16); { outline the accept button }	 		  END;                {ееее} UNTIL ExitDialog;       DisposeDialog(GetSelection);      Mouse_Active_Window; END; { PROCEDURE MANUAL_RUN; }  {$S Connect2}	procedure CIT_Unanalyzed_Element;      CONST        I_Accept                      = 1;        I_Cancel                      = 2;        I_Use_a_Setup_File            = 3;        I_Save_the_Setup_File         = 4;        I_Set_Up_an_Analysis          = 5;        I_NOT_Normalize	              = 6;        I_Normalize		              = 7;        I_x                           = 8;        I_Help                        = 10;        I_Manual                      = 11;				      VAR        ExitDialog                   : boolean;        GetSelection                 : DialogPtr;        tempRect                     : Rect;        DType                        : integer;        index	                     : integer;        DItem                        : Handle;        CItem			             : controlhandle;        itemHit                      : integer;        temp                         : integer;		Setup_File_name			     : fnamestr;        refNum_su                    : integer;		errcode						 : integer;        bytecount                    : longint;        mytype                       : OsType;        myprompt                     : Str255;		ZAF_Trip_keeper			     : Boolean;        label 100;		      PROCEDURE Refresh_Dialog;        VAR          rTempRect                    : Rect;        BEGIN          SetPort(GetSelection);          rTempRect := tempRect;          GetDialogItem(GetSelection, I_Accept, DType, DItem, tempRect);          PenSize(3, 3);          InsetRect(tempRect, - 4, - 4);          FrameRoundRect(tempRect, 16, 16);          PenSize(1, 1);           tempRect := rTempRect;        END;      BEGIN                                           { procedure D_dialzaf }	    ZAF_Trip_keeper := False;		if not CIT_Initialized then Initialize_World;		CIT_Initialized := true;  100:  GetSelection := GetNewDialog(740, NIL, Pointer( - 1));	{main citzaf dialog}        ShowWindow(GetSelection);        SelectWindow(GetSelection);        SetPort(GetSelection);        GetDialogItem(GetSelection, I_Normalize, DType, DItem, tempRect);        SetControlValue(controlhandle(DItem), 0);			   GetDialogItem(GetSelection,I_NOT_Normalize,DType,DItem,tempRect);	   SetControlValue(controlhandle(DItem), 1);	   GetDialogItem(GetSelection,I_Help,DType,DItem,tempRect);	   HideControl(ControlHandle(DItem)); 	  		if not (ZAF_Trip_keeper) then		  begin		   GetDialogItem(GetSelection,I_Save_the_Setup_File,DType,DItem,tempRect);		   HiliteControl(controlhandle(DItem), 255); 		   GetDialogItem(GetSelection,I_Accept,DType,DItem,tempRect);		   HiliteControl(controlhandle(DItem), 255); 	  		  end		else		  begin		   GetDialogItem(GetSelection,I_Use_a_Setup_File,DType,DItem,tempRect);		   HiliteControl(controlhandle(DItem), 255); 		   GetDialogItem(GetSelection,I_Set_Up_an_Analysis,DType,DItem,tempRect);		   HiliteControl(controlhandle(DItem), 255); 	  		  end;	(*   GetDialogItem(GetSelection,I_Long_output_file,DType,DItem,tempRect);	   CItem := Pointer(DItem);	   SetControlValue(CItem, 0);	   HiliteControl(CItem, 255); { grey this out until it gets hooked up }  *)        Refresh_Dialog;        ExitDialog := False;        REPEAT          ModalDialog(NIL, itemHit);          GetDialogItem(GetSelection, itemHit, DType, DItem, tempRect);          CItem := controlhandle(DItem);                     IF (itemHit = I_Accept)            THEN              BEGIN                                { *** This should run the ZAF procedure *** }				{ZAF_Direction := 3;}				{FRAM;}				citZAF_Run := True;				ZAF_Record^^.Num_Fit_Peaks := 0;                ExitDialog := True;                Refresh_Dialog;              END;          IF (itemHit = I_Cancel)            THEN              BEGIN                                { *** Simply get out *** }				citZAF_Run := False;   { Turn off auto ZAF }				DisposeDialog(GetSelection);			    update_full;                Exit( CIT_Unanalyzed_Element );              END;			            IF (itemHit = I_Manual) THEN 		      Begin			     Manual_Mode := TRUE;			     MANUAL_RUN;                Refresh_Dialog;			  END;          (*IF (itemHit = I_Help) THEN 		      Begin                Refresh_Dialog;			  END;*)			            IF (itemHit = I_Use_a_Setup_File)            THEN              BEGIN                { *** Go and open a setup file - select the file *** }                mytype := 'MCAz';                myprompt := 'Open ZAF Setup File';                IF (GetFileName(Setup_File_name, mytype, mytype, myprompt))                  THEN                    BEGIN                      errcode := FSOpen(Setup_File_name, 0, refNum_su);                      IF errcode <> NoErr                        THEN putmessage('Error on Open', '', '', '');                      IF errcode = fnOpnErr                        THEN putmessage(' File not open', '', '', '');                      IF errcode = rfNumErr                        THEN putmessage(' Bad reference number', '', '', '');                      IF errcode = extFSErr                        THEN putmessage(' External File System', '', '', '');                      OutlineButton(GetSelection, 1, 16); { outline the accept button }					  bytecount := SizeOf(ZAF_full);					  errcode := FSRead(refNum_su, bytecount, @ZAF_Record^^);                   END;			   GetDialogItem(GetSelection,I_Set_Up_an_Analysis,DType,DItem,tempRect);			   HiliteControl(controlhandle(DItem), 255); 				   GetDialogItem(GetSelection,I_Accept,DType,DItem,tempRect);			   HiliteControl(controlhandle(DItem), 0); 	                  {ExitDialog:=TRUE;}                OutlineButton(GetSelection, 1, 16);   { outline the accept button }                errcode := FSClose(refNum_su);                errcode := FlushVol(NIL, 0);                Refresh_Dialog;              END;          IF (itemHit = I_Save_the_Setup_File)            THEN              BEGIN                { *** Save the setup generated - do a putfile ***  }                {create a ZAF standard setup file}                Setup_File_name := 'ZAF_Setup.Sav';                REPEAT                UNTIL (CreateFile(Setup_File_name, 'Create Setup File:') = True) OR 				      (File_Cancel_Button = False);                IF (File_Cancel_Button)                  THEN                    BEGIN                      errcode := Create(Setup_File_name, 0, 'MCAm', 'MCAz');                      errcode := FSOpen(Setup_File_name, 0, refNum_su);                      IF errcode = NoErr                        THEN                          BEGIN                            errcode := setfpos(refNum_su, FSFromSTART, 0);							bytecount := SizeOf(ZAF_full);							errcode := FSWrite(refNum_su, bytecount, @ZAF_Record^^);							                          END                        ELSE putmessage('The file did not open', '', '', '');                      Refresh_Dialog;                    END;                OutlineButton(GetSelection, 1, 16);   { outline the accept button }                errcode := FSClose(refNum_su);                errcode := FlushVol(NIL, 0);                {   ExitDialog:=TRUE;}                Refresh_Dialog;              END;          IF (itemHit = I_Set_Up_an_Analysis)            THEN              BEGIN				IF (NOT Simplex_active) AND (NOT LLSQ_active) THEN				  BEGIN					BeepBeep;					Putmessage('You have not chosen and setup a fitting procedure.',							   'Setup either Linear Least Squares (LLSQ) or the Simplex', 							   'before doing on-line quantitative analysis.', '');					Fit_Invisibly := False;					DisposeDialog(GetSelection);					exit(CIT_Unanalyzed_Element); 				  END;                  			                  { *** Call the routine to select standards - should have all data *** }				num_std_structures := 0;				ZAF_Trip_keeper := True;								temprect := GetSelection^.portRect;				DisposeDialog(GetSelection);                FillWhiteSpace (temprect);  								Update_Full;                D_Select_Standard;                goto 100;             END;          IF (itemHit >= I_NOT_Normalize) AND (itemHit <= I_Normalize)            THEN              BEGIN                FOR index := I_NOT_Normalize TO I_Normalize DO                  BEGIN                    GetDialogItem(GetSelection, index, DType, DItem, tempRect);                    SetControlValue(controlhandle(DItem), 0);                  END;                SetControlValue(CItem, 1);              END;        UNTIL ExitDialog;        {Get results after dialog}				if (citZAF_Run) then		  begin		  		    {call a procedure to move standards data from ZAF_Standard to citZAF variables}			Spectrum_Handler;					  end;		        index := I_NOT_Normalize;        REPEAT          GetDialogItem(GetSelection, index, DType, DItem, tempRect);          temp := GetControlValue(controlhandle(DItem));          index := index + 1;        UNTIL (temp <> 0) OR (index > I_Normalize);        temp := index - I_NOT_Normalize;		if ( temp = 1 ) then			ZAF_Record^^.ZAF_data.Normalize_On := False		else if ( temp = 2 ) then 			ZAF_Record^^.ZAF_data.Normalize_On := True;        DisposeDialog(GetSelection);		end;		{ procedure CIT_Unanalyzed_Element }	  	END.