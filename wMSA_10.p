UNIT wMSA_Format_10_Plug;INTERFACEUSES	Types, QuickDraw, Memory, fp, StandardFile, GestaltEqu, Errors, Files,	TextUtils, {PascalA4,} FilePlugIns;const		__procinfo : longint = $3F80;{$Main}PROCEDURE	ENTRYPOINT(message:Integer; VAR InPtr:IOPlugPtr; VAR theResult:OSerr);IMPLEMENTATION{$IFC NOT POWERPC}uses PascalA4;{$ENDC}PROCEDURE wMSA_Format_10(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;PROCEDURE DoAbout(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;PROCEDURE DoOpen(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;PROCEDURE DoRead(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);FORWARD;{FUNCTION	Str2Num(s: Str255): Real;FORWARD;}PROCEDURE 	ENTRYPOINT{(message:Integer; VAR InPtr:IOPlugPtr; VAR theResult:OSErr)};		{ Main dispatching routine.  Initializes and sets up the global variables,	}		{		and performs the operation specified by the message. 				}VAR	firstTime	: BOOLEAN;	OldA4		: Longint;BEGIN{$IFC NOT POWERPC}	oldA4 := SetCurrentA4();	RememberA4();{$ENDC}	theResult:=noErr;	firstTime:=(InPtr=NIL);					{ See if this is the first time called }	IF firstTime THEN BEGIN						{ If so, allocate and initialize a data area }		InPtr:= IOPlugPtr(NewPtrClear(sizeof(IOPlug)));		IF (InPtr=NIL) THEN BEGIN			debugstr('memFullErr');			theResult:=memFullErr;{$IFC NOT POWERPC}	oldA4 := SetA4(oldA4);{$ENDC}			EXIT(ENTRYPOINT);		END;				END;		CASE message OF					{ Perform the requested operation }		fileAbout		:DoAbout(InPtr, theResult);		ImpFile			:DoRead(InPtr, theResult);		ExpFile			:wMSA_Format_10(InPtr, theResult);		OpenInPlug		:DoOpen(InPtr, theResult);		OpenExPlug		:DoOpen(InPtr, theResult);		END; {CASE message}		{$IFC NOT POWERPC}	oldA4 := SetA4(oldA4);{$ENDC}END;PROCEDURE DoAbout(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);	Begin	End;	PROCEDURE DoOpen(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);	Begin		InPtr^.PlugInName:='Write MSA 1.0';		{Debugstr('Inside of wMSA_Format_R - Do Open');}		theResult := noErr;	End;	PROCEDURE DoRead(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);	Begin	End;PROCEDURE wMSA_Format_10(VAR InPtr : IOPlugPtr; VAR theResult:OSerr);          VAR      index, nn, jj, kk             : integer;      FileSize                      : longint;      Refnum                     	: integer;      indexL, posit                 : longint;      bytecount                     : longint;      str, str1, str2               : str255;	  num_channels					: real;	  err	                        : OSErr;	  IValue						: longint;	  Version, Rvalue, columns      : real;  	BEGIN		Refnum := InPtr^.rd_refNum;		{Debugstr('Inside of MSA_Format');}		str := '#FORMAT      : EMSA/MAS SPECTRAL DATA STANDARD';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);							str := '#VERSION     : 1.0';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);				str := '#TITLE       : ';		str := CONCAT(str, InPtr^.Specimen_Comment_Field,chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);				str := '#DATE        : 2-Feb-1997';		str := CONCAT(str,chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);				str := '#TIME        : 11:11:20';		str := CONCAT(str,chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);				str := '#OWNER       : ';		str := CONCAT(str, InPtr^.Owner,chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);						str := '#NPOINTS     : ';		str := StringOf(str, InPtr^.Number_of_Channels:5, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#NCOLUMNS    : 5.0';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#XUNITS      : Energy(eV)';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#YUNITS      : Intensity';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#DATATYPE    : Y';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#XPERCHAN    : ';		str := StringOf(str, InPtr^.dE:4:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#OFFSET      : ';		str := StringOf(str, InPtr^.NDoffset:6, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		{End of required keywords - rest are optional}		str := '#CHOFFSET    : 0.0';		str := StringOf(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#SIGNALTYPE  : ';		str := StringOf(str, InPtr^.Spectrum_Type, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#XLABEL      : X-RAY ENERGY';		str := StringOf(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#YLABEL      : X-RAY INTENSITY';		str := StringOf(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#BEAMKV-kV   : ';		str := StringOf(str, InPtr^.kV:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);				(*str := '#EMISSION    : 10';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);*)		str := '#PROBECUR-nA : ';		str := StringOf(str, InPtr^.Begin_Faraday:5:3, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#OPERMODE    : IMAGE';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TBEWIND     : ';		str := StringOf(str, InPtr^.T_Be_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		str := '#TALWIND     : ';		str := StringOf(str, InPtr^.T_Al_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TPYWIND     : ';		str := StringOf(str, InPtr^.T_Py_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TBNWIND     : ';		str := StringOf(str, InPtr^.T_BN_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TDIWIND     : ';		str := StringOf(str, InPtr^.T_Di_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#THCWIND     : ';		str := StringOf(str, InPtr^.T_HC_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#EDSSET      : SIUTW';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#XTILTSTGE-dg: ';		str := StringOf(str, InPtr^.X_Tilt:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#ELEVANGLE-dg: ';		str := StringOf(str, InPtr^.D_Elevation:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#AZIMANGLE-dg: ';		str := StringOf(str, InPtr^.D_Azimuth:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#SOLIDANGL-dg: 0.00800';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#LIVETIME    : ';		str := StringOf(str, InPtr^.Live_Time:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TAUWIND     : ';		str := StringOf(str, InPtr^.T_Au_Wind*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TDEADLAYR   : ';		str := StringOf(str, InPtr^.T_Dead_Layr*0.0001:9:7, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#TACTLYR    : ';		str := StringOf(str, InPtr^.T_Act_Layr*0.1:4:2, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#REALTIME    : ';		str := StringOf(str, InPtr^.Real_Time:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#YTILTSTGE   : ';		str := StringOf(str, InPtr^.Y_Tilt:5:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#THICKNESS   : ';	{Specimen thickness}		str := StringOf(str, InPtr^.S_Thickness*1.0E7:7:1, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '##MNFWHM     : ';		str := StringOf(str, InPtr^.Mn_FWHM/1000.0:6:4, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#COMMENT     : No Comment';		str := StringOf(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);		str := '#SPECTRUM: DATA BEGINS HERE';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);{ееееееееееееееее}          jj := 1; { jj will be the channel number }          num_channels := InPtr^.Number_of_Channels;          REPEAT {еееее This part writes the spectrum еееее}			indexL := 0;            str := '';            WHILE ((indexL < 5) AND (jj <= num_channels)) DO begin              indexL := indexL + 1;           	  str := StringOf(str, InPtr^.Spec_cts[jj]:15:1,chr(44));          	  jj := jj + 1;          	END;          	str := CONCAT(str, chr(13), chr(10));			IValue := length(str);			err := FSWrite(Refnum,IValue,@str[1]);          UNTIL (jj > num_channels); {еееее This part read in the spectrum еееее}		str := '#ENDOFDATA :';		str := CONCAT(str, chr(13), chr(10));		IValue := length(str);		err := FSWrite(Refnum,IValue,@str[1]);      END; { MSA Format }END.